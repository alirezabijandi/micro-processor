
AVRASM ver. 2.1.30  L:\projects\QUESTION\parsa rajabi\Series 03\elevator_part1\Debug\List\main.asm Sun Apr 11 22:14:43 2021

L:\projects\QUESTION\parsa rajabi\Series 03\elevator_part1\Debug\List\main.asm(1088): warning: Register r4 already defined by the .DEF directive
L:\projects\QUESTION\parsa rajabi\Series 03\elevator_part1\Debug\List\main.asm(1089): warning: Register r5 already defined by the .DEF directive
L:\projects\QUESTION\parsa rajabi\Series 03\elevator_part1\Debug\List\main.asm(1090): warning: Register r6 already defined by the .DEF directive
L:\projects\QUESTION\parsa rajabi\Series 03\elevator_part1\Debug\List\main.asm(1091): warning: Register r7 already defined by the .DEF directive
L:\projects\QUESTION\parsa rajabi\Series 03\elevator_part1\Debug\List\main.asm(1092): warning: Register r8 already defined by the .DEF directive
L:\projects\QUESTION\parsa rajabi\Series 03\elevator_part1\Debug\List\main.asm(1093): warning: Register r9 already defined by the .DEF directive
L:\projects\QUESTION\parsa rajabi\Series 03\elevator_part1\Debug\List\main.asm(1094): warning: Register r10 already defined by the .DEF directive
L:\projects\QUESTION\parsa rajabi\Series 03\elevator_part1\Debug\List\main.asm(1095): warning: Register r11 already defined by the .DEF directive
L:\projects\QUESTION\parsa rajabi\Series 03\elevator_part1\Debug\List\main.asm(1096): warning: Register r12 already defined by the .DEF directive
L:\projects\QUESTION\parsa rajabi\Series 03\elevator_part1\Debug\List\main.asm(1097): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _a=R4
                 	.DEF _a_msb=R5
                 	.DEF _b=R6
                 	.DEF _b_msb=R7
                 	.DEF _flor=R8
                 	.DEF _flor_msb=R9
                 	.DEF _hadaf=R10
                 	.DEF _hadaf_msb=R11
                 	.DEF _i=R12
                 	.DEF _i_msb=R13
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 003b 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
00002a 0000      	.DW  0x0000
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
00002b 0001      	.DB  0x1,0x0
                 
                 _0x3:
00002c 063f
00002d 4f5b
00002e 6d66
00002f 077d      	.DB  0x3F,0x6,0x5B,0x4F,0x66,0x6D,0x7D,0x7
000030 6f7f      	.DB  0x7F,0x6F
                 
                 __GLOBAL_INI_TBL:
000031 0001      	.DW  0x01
000032 0002      	.DW  0x02
000033 0054      	.DW  __REG_BIT_VARS*2
                 
000034 0002      	.DW  0x02
000035 0008      	.DW  0x08
000036 0056      	.DW  __REG_VARS*2
                 
000037 000a      	.DW  0x0A
000038 0260      	.DW  _number
000039 0058      	.DW  _0x3*2
                 
                 _0xFFFFFFFF:
00003a 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00003b 94f8      	CLI
00003c 27ee      	CLR  R30
00003d bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00003e e0f1      	LDI  R31,1
00003f bffb      	OUT  GICR,R31
000040 bfeb      	OUT  GICR,R30
000041 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000042 e08d      	LDI  R24,(14-2)+1
000043 e0a2      	LDI  R26,2
000044 27bb      	CLR  R27
                 __CLEAR_REG:
000045 93ed      	ST   X+,R30
000046 958a      	DEC  R24
000047 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000048 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000049 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00004a e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00004b 93ed      	ST   X+,R30
00004c 9701      	SBIW R24,1
00004d f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00004e e6e2      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00004f e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000050 9185      	LPM  R24,Z+
000051 9195      	LPM  R25,Z+
000052 9700      	SBIW R24,0
000053 f061      	BREQ __GLOBAL_INI_END
000054 91a5      	LPM  R26,Z+
000055 91b5      	LPM  R27,Z+
000056 9005      	LPM  R0,Z+
000057 9015      	LPM  R1,Z+
000058 01bf      	MOVW R22,R30
000059 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00005a 9005      	LPM  R0,Z+
00005b 920d      	ST   X+,R0
00005c 9701      	SBIW R24,1
00005d f7e1      	BRNE __GLOBAL_INI_LOOP
00005e 01fb      	MOVW R30,R22
00005f cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000060 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000061 bfed      	OUT  SPL,R30
000062 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000063 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000064 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000065 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000066 940c 00f4 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;/*******************************************************
                 ;
                 ;Chip type               : ATmega32
                 ;Program type            : Application
                 ;AVR Core Clock frequency: 8.000000 MHz
                 ;Memory model            : Small
                 ;External RAM size       : 0
                 ;Data Stack size         : 512
                 ;*******************************************************/
                 ;
                 ;#include <mega32a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;
                 ;#define f11  PINA.0
                 ;#define f12  PINA.1
                 ;#define f13  PINA.2
                 ;#define f14  PINA.3
                 ;#define f15  PINA.4
                 ;#define f16  PINA.5
                 ;#define f17  PINA.6
                 ;#define f18  PINA.7
                 ;
                 ;#define f19  PINC.0
                 ;#define f110  PINC.1
                 ;#define f111  PINC.2
                 ;#define f112  PINC.3
                 ;#define f113  PINC.4
                 ;#define f114  PINC.5
                 ;#define f115  PINC.6
                 ;#define f116  PINC.7
                 ;
                 ;#define f117  PIND.0
                 ;#define f118  PIND.1
                 ;#define f119  PIND.2
                 ;#define f120  PIND.3
                 ;
                 ;
                 ;#define dig1  PORTD.4
                 ;#define dig2  PORTD.5
                 ;
                 ;
                 ;#define MOTOR_RIGHT  PORTD.6
                 ;#define MOTOR_LEFT   PORTD.7
                 ;
                 ;
                 ;unsigned char number[] ={0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F};
                 
                 	.DSEG
                 ;int a , b ,flor = 1 , hadaf , i,z  , tabaga;
                 ;
                 ;int target[21] ;
                 ;bit press ;
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;void show(int flor)
                 ; 0000 0039 {
                 
                 	.CSEG
                 _show:
                 ; .FSTART _show
                 ; 0000 003A      {
000068 93ba      	ST   -Y,R27
000069 93aa      	ST   -Y,R26
                 ;	flor -> Y+0
                 ; 0000 003B      a = flor/10 ;
00006a 81a8      	LD   R26,Y
00006b 81b9      	LDD  R27,Y+1
00006c e0ea      	LDI  R30,LOW(10)
00006d e0f0      	LDI  R31,HIGH(10)
00006e 940e 01ba 	CALL __DIVW21
000070 012f      	MOVW R4,R30
                 ; 0000 003C      b = flor%10 ;
000071 81a8      	LD   R26,Y
000072 81b9      	LDD  R27,Y+1
000073 e0ea      	LDI  R30,LOW(10)
000074 e0f0      	LDI  R31,HIGH(10)
000075 940e 01bf 	CALL __MODW21
000077 013f      	MOVW R6,R30
                 ; 0000 003D 
                 ; 0000 003E      tabaga = flor;
000078 81e8      	LD   R30,Y
000079 81f9      	LDD  R31,Y+1
00007a 93e0 026c 	STS  _tabaga,R30
00007c 93f0 026d 	STS  _tabaga+1,R31
                 ; 0000 003F      delay_ms(50);
00007e e3a2      	LDI  R26,LOW(50)
00007f e0b0      	LDI  R27,0
000080 940e 0199 	CALL _delay_ms
                 ; 0000 0040 
                 ; 0000 0041     dig1 = 0 ; //on
000082 9894      	CBI  0x12,4
                 ; 0000 0042     dig2 = 1 ; //off
000083 9a95      	SBI  0x12,5
                 ; 0000 0043     PORTB = number[a];
000084 e6a0      	LDI  R26,LOW(_number)
000085 e0b2      	LDI  R27,HIGH(_number)
000086 0da4      	ADD  R26,R4
000087 1db5      	ADC  R27,R5
000088 91ec      	LD   R30,X
000089 bbe8      	OUT  0x18,R30
                 ; 0000 0044 
                 ; 0000 0045     delay_ms(50);
00008a e3a2      	LDI  R26,LOW(50)
00008b e0b0      	LDI  R27,0
00008c 940e 0199 	CALL _delay_ms
                 ; 0000 0046 
                 ; 0000 0047     dig1 = 1 ; //off
00008e 9a94      	SBI  0x12,4
                 ; 0000 0048     dig2 = 0 ; //on
00008f 9895      	CBI  0x12,5
                 ; 0000 0049     PORTB = number[b];
000090 e6a0      	LDI  R26,LOW(_number)
000091 e0b2      	LDI  R27,HIGH(_number)
000092 0da6      	ADD  R26,R6
000093 1db7      	ADC  R27,R7
000094 91ec      	LD   R30,X
000095 bbe8      	OUT  0x18,R30
                 ; 0000 004A     }
                 ; 0000 004B 
                 ; 0000 004C 
                 ; 0000 004D }
000096 c01a      	RJMP _0x2000001
                 ; .FEND
                 ;
                 ;void wait(int j)
                 ; 0000 0050 {
                 _wait:
                 ; .FSTART _wait
                 ; 0000 0051     for (z = 0 ;z<= j ;z++)
000097 93ba      	ST   -Y,R27
000098 93aa      	ST   -Y,R26
                 ;	j -> Y+0
000099 e0e0      	LDI  R30,LOW(0)
00009a 93e0 026a 	STS  _z,R30
00009c 93e0 026b 	STS  _z+1,R30
                 _0xD:
00009e 81e8      	LD   R30,Y
00009f 81f9      	LDD  R31,Y+1
0000a0 91a0 026a 	LDS  R26,_z
0000a2 91b0 026b 	LDS  R27,_z+1
0000a4 17ea      	CP   R30,R26
0000a5 07fb      	CPC  R31,R27
0000a6 f054      	BRLT _0xE
                 ; 0000 0052     {
                 ; 0000 0053         show(flor);
0000a7 01d4      	MOVW R26,R8
0000a8 dfbf      	RCALL _show
                 ; 0000 0054     }
0000a9 e6aa      	LDI  R26,LOW(_z)
0000aa e0b2      	LDI  R27,HIGH(_z)
0000ab 91ed      	LD   R30,X+
0000ac 91fd      	LD   R31,X+
0000ad 9631      	ADIW R30,1
0000ae 93fe      	ST   -X,R31
0000af 93ee      	ST   -X,R30
0000b0 cfed      	RJMP _0xD
                 _0xE:
                 ; 0000 0055 }
                 _0x2000001:
0000b1 9622      	ADIW R28,2
0000b2 9508      	RET
                 ; .FEND
                 ;
                 ;void open ()
                 ; 0000 0058 {
                 _open:
                 ; .FSTART _open
                 ; 0000 0059       MOTOR_RIGHT = 1 ;
0000b3 9a96      	SBI  0x12,6
                 ; 0000 005A       wait(30);
0000b4 e1ae      	LDI  R26,LOW(30)
0000b5 e0b0      	LDI  R27,0
0000b6 dfe0      	RCALL _wait
                 ; 0000 005B       MOTOR_RIGHT = 0 ;
0000b7 9896      	CBI  0x12,6
                 ; 0000 005C       MOTOR_LEFT = 1  ;
0000b8 9a97      	SBI  0x12,7
                 ; 0000 005D       wait(30);
0000b9 e1ae      	LDI  R26,LOW(30)
0000ba e0b0      	LDI  R27,0
0000bb dfdb      	RCALL _wait
                 ; 0000 005E       MOTOR_LEFT = 0  ;
0000bc 9897      	CBI  0x12,7
                 ; 0000 005F 
                 ; 0000 0060       PORTB.7 = 0 ;
0000bd 98c7      	CBI  0x18,7
                 ; 0000 0061 }
0000be 9508      	RET
                 ; .FEND
                 ;
                 ;void process()
                 ; 0000 0064 {
                 _process:
                 ; .FSTART _process
                 ; 0000 0065  if(press == 1)
0000bf fe20      	SBRS R2,0
0000c0 c032      	RJMP _0x19
                 ; 0000 0066     {
                 ; 0000 0067        for(i=1 ; i<21 ;i++)
0000c1 e0e1      	LDI  R30,LOW(1)
0000c2 e0f0      	LDI  R31,HIGH(1)
0000c3 016f      	MOVW R12,R30
                 _0x1B:
0000c4 e1e5      	LDI  R30,LOW(21)
0000c5 e0f0      	LDI  R31,HIGH(21)
0000c6 16ce      	CP   R12,R30
0000c7 06df      	CPC  R13,R31
0000c8 f554      	BRGE _0x1C
                 ; 0000 0068        {
                 ; 0000 0069             if(target[i] == 1)
0000c9 d0bb      	RCALL SUBOPT_0x0
0000ca 940e 01db 	CALL __GETW1P
0000cc 30e1      	CPI  R30,LOW(0x1)
0000cd e0a0      	LDI  R26,HIGH(0x1)
0000ce 07fa      	CPC  R31,R26
0000cf f4f9      	BRNE _0x1D
                 ; 0000 006A             {
                 ; 0000 006B                 PORTB.7 = 1 ;
0000d0 9ac7      	SBI  0x18,7
                 ; 0000 006C                 hadaf = i ;
0000d1 0156      	MOVW R10,R12
                 ; 0000 006D 
                 ; 0000 006E                 if(hadaf < flor)
                +
0000d2 14a8     +CP R10 , R8
0000d3 04b9     +CPC R11 , R9
                 	__CPWRR 10,11,8,9
0000d4 f434      	BRGE _0x20
                 ; 0000 006F                     {
                 ; 0000 0070                     wait(5);
0000d5 e0a5      	LDI  R26,LOW(5)
0000d6 e0b0      	LDI  R27,0
0000d7 dfbf      	RCALL _wait
                 ; 0000 0071                         flor-- ;
0000d8 01f4      	MOVW R30,R8
0000d9 9731      	SBIW R30,1
0000da 014f      	MOVW R8,R30
                 ; 0000 0072                     }
                 ; 0000 0073                     if(hadaf > flor)
                 _0x20:
                +
0000db 148a     +CP R8 , R10
0000dc 049b     +CPC R9 , R11
                 	__CPWRR 8,9,10,11
0000dd f434      	BRGE _0x21
                 ; 0000 0074                     {
                 ; 0000 0075                     wait(5);
0000de e0a5      	LDI  R26,LOW(5)
0000df e0b0      	LDI  R27,0
0000e0 dfb6      	RCALL _wait
                 ; 0000 0076                         flor++ ;
0000e1 01f4      	MOVW R30,R8
0000e2 9631      	ADIW R30,1
0000e3 014f      	MOVW R8,R30
                 ; 0000 0077                     }
                 ; 0000 0078                     if(hadaf == flor)
                 _0x21:
                +
0000e4 148a     +CP R8 , R10
0000e5 049b     +CPC R9 , R11
                 	__CPWRR 8,9,10,11
0000e6 f441      	BRNE _0x22
                 ; 0000 0079                     {
                 ; 0000 007A                         press = 0 ;
0000e7 94e8      	CLT
0000e8 f820      	BLD  R2,0
                 ; 0000 007B                         open() ;
0000e9 dfc9      	RCALL _open
                 ; 0000 007C                         target[i] = 0 ;
0000ea d09a      	RCALL SUBOPT_0x0
0000eb e0e0      	LDI  R30,LOW(0)
0000ec e0f0      	LDI  R31,HIGH(0)
0000ed 93ed      	ST   X+,R30
0000ee 93fc      	ST   X,R31
                 ; 0000 007D                     }
                 ; 0000 007E             }
                 _0x22:
                 ; 0000 007F        }
                 _0x1D:
0000ef 01f6      	MOVW R30,R12
0000f0 9631      	ADIW R30,1
0000f1 016f      	MOVW R12,R30
0000f2 cfd1      	RJMP _0x1B
                 _0x1C:
                 ; 0000 0080 
                 ; 0000 0081     }
                 ; 0000 0082 }
                 _0x19:
0000f3 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;void main(void)
                 ; 0000 0086 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0087 
                 ; 0000 0088 DDRB = 0XFF ;
0000f4 efef      	LDI  R30,LOW(255)
0000f5 bbe7      	OUT  0x17,R30
                 ; 0000 0089 
                 ; 0000 008A DDRD.4 = 1 ;
0000f6 9a8c      	SBI  0x11,4
                 ; 0000 008B DDRD.5 = 1 ;
0000f7 9a8d      	SBI  0x11,5
                 ; 0000 008C DDRD.6 = 1 ;
0000f8 9a8e      	SBI  0x11,6
                 ; 0000 008D DDRD.7 = 1 ;
0000f9 9a8f      	SBI  0x11,7
                 ; 0000 008E 
                 ; 0000 008F while (1)
                 _0x2B:
                 ; 0000 0090       {
                 ; 0000 0091         process();
0000fa dfc4      	RCALL _process
                 ; 0000 0092         show(flor);
0000fb 01d4      	MOVW R26,R8
0000fc df6b      	RCALL _show
                 ; 0000 0093 
                 ; 0000 0094         if(f11 == 0)
0000fd 99c8      	SBIC 0x19,0
0000fe c003      	RJMP _0x2E
                 ; 0000 0095         {
                 ; 0000 0096             target[1] = 1 ;
                +
0000ff e7e0     +LDI R30 , LOW ( _target + ( 2 ) )
000100 e0f2     +LDI R31 , HIGH ( _target + ( 2 ) )
                 	__POINTW1MN _target,2
000101 d08b      	RCALL SUBOPT_0x1
                 ; 0000 0097             press = 1 ;
                 ; 0000 0098         }
                 ; 0000 0099         if(f12 == 0)
                 _0x2E:
000102 99c9      	SBIC 0x19,1
000103 c003      	RJMP _0x2F
                 ; 0000 009A         {
                 ; 0000 009B             target[2] = 1 ;
                +
000104 e7e2     +LDI R30 , LOW ( _target + ( 4 ) )
000105 e0f2     +LDI R31 , HIGH ( _target + ( 4 ) )
                 	__POINTW1MN _target,4
000106 d086      	RCALL SUBOPT_0x1
                 ; 0000 009C             press = 1 ;
                 ; 0000 009D         }
                 ; 0000 009E         if(f13 == 0)
                 _0x2F:
000107 99ca      	SBIC 0x19,2
000108 c003      	RJMP _0x30
                 ; 0000 009F         {
                 ; 0000 00A0             target[3] = 1 ;
                +
000109 e7e4     +LDI R30 , LOW ( _target + ( 6 ) )
00010a e0f2     +LDI R31 , HIGH ( _target + ( 6 ) )
                 	__POINTW1MN _target,6
00010b d081      	RCALL SUBOPT_0x1
                 ; 0000 00A1             press = 1 ;
                 ; 0000 00A2         }
                 ; 0000 00A3         if(f14 == 0 )
                 _0x30:
00010c 99cb      	SBIC 0x19,3
00010d c005      	RJMP _0x31
                 ; 0000 00A4         {
                 ; 0000 00A5             press = 1 ;
00010e 9468      	SET
00010f f820      	BLD  R2,0
                 ; 0000 00A6             target[4] = 1 ;
                +
000110 e7e6     +LDI R30 , LOW ( _target + ( 8 ) )
000111 e0f2     +LDI R31 , HIGH ( _target + ( 8 ) )
                 	__POINTW1MN _target,8
000112 d081      	RCALL SUBOPT_0x2
                 ; 0000 00A7         }
                 ; 0000 00A8         if(f15 == 0)
                 _0x31:
000113 99cc      	SBIC 0x19,4
000114 c005      	RJMP _0x32
                 ; 0000 00A9         {
                 ; 0000 00AA             press = 1 ;
000115 9468      	SET
000116 f820      	BLD  R2,0
                 ; 0000 00AB             target[5] = 1 ;
                +
000117 e7e8     +LDI R30 , LOW ( _target + ( 10 ) )
000118 e0f2     +LDI R31 , HIGH ( _target + ( 10 ) )
                 	__POINTW1MN _target,10
000119 d07a      	RCALL SUBOPT_0x2
                 ; 0000 00AC         }
                 ; 0000 00AD         if(f16 == 0)
                 _0x32:
00011a 99cd      	SBIC 0x19,5
00011b c005      	RJMP _0x33
                 ; 0000 00AE         {
                 ; 0000 00AF             press = 1 ;
00011c 9468      	SET
00011d f820      	BLD  R2,0
                 ; 0000 00B0             target[6] = 1 ;
                +
00011e e7ea     +LDI R30 , LOW ( _target + ( 12 ) )
00011f e0f2     +LDI R31 , HIGH ( _target + ( 12 ) )
                 	__POINTW1MN _target,12
000120 d073      	RCALL SUBOPT_0x2
                 ; 0000 00B1         }
                 ; 0000 00B2         if(f17 == 0)
                 _0x33:
000121 99ce      	SBIC 0x19,6
000122 c005      	RJMP _0x34
                 ; 0000 00B3         {
                 ; 0000 00B4             press = 1 ;
000123 9468      	SET
000124 f820      	BLD  R2,0
                 ; 0000 00B5             target[7] = 1 ;
                +
000125 e7ec     +LDI R30 , LOW ( _target + ( 14 ) )
000126 e0f2     +LDI R31 , HIGH ( _target + ( 14 ) )
                 	__POINTW1MN _target,14
000127 d06c      	RCALL SUBOPT_0x2
                 ; 0000 00B6         }
                 ; 0000 00B7         if(f18 == 0)
                 _0x34:
000128 99cf      	SBIC 0x19,7
000129 c005      	RJMP _0x35
                 ; 0000 00B8         {
                 ; 0000 00B9             press = 1 ;
00012a 9468      	SET
00012b f820      	BLD  R2,0
                 ; 0000 00BA             target[8] = 1 ;
                +
00012c e7ee     +LDI R30 , LOW ( _target + ( 16 ) )
00012d e0f2     +LDI R31 , HIGH ( _target + ( 16 ) )
                 	__POINTW1MN _target,16
00012e d065      	RCALL SUBOPT_0x2
                 ; 0000 00BB         }
                 ; 0000 00BC         if(f19 == 0)
                 _0x35:
00012f 9998      	SBIC 0x13,0
000130 c005      	RJMP _0x36
                 ; 0000 00BD         {
                 ; 0000 00BE             press = 1 ;
000131 9468      	SET
000132 f820      	BLD  R2,0
                 ; 0000 00BF             target[9] = 1 ;
                +
000133 e8e0     +LDI R30 , LOW ( _target + ( 18 ) )
000134 e0f2     +LDI R31 , HIGH ( _target + ( 18 ) )
                 	__POINTW1MN _target,18
000135 d05e      	RCALL SUBOPT_0x2
                 ; 0000 00C0         }
                 ; 0000 00C1         if(f110 == 0)
                 _0x36:
000136 9999      	SBIC 0x13,1
000137 c005      	RJMP _0x37
                 ; 0000 00C2         {
                 ; 0000 00C3             press = 1 ;
000138 9468      	SET
000139 f820      	BLD  R2,0
                 ; 0000 00C4             target[10] = 1 ;
                +
00013a e8e2     +LDI R30 , LOW ( _target + ( 20 ) )
00013b e0f2     +LDI R31 , HIGH ( _target + ( 20 ) )
                 	__POINTW1MN _target,20
00013c d057      	RCALL SUBOPT_0x2
                 ; 0000 00C5         }
                 ; 0000 00C6         if(f111 == 0)
                 _0x37:
00013d 999a      	SBIC 0x13,2
00013e c005      	RJMP _0x38
                 ; 0000 00C7         {
                 ; 0000 00C8             press = 1 ;
00013f 9468      	SET
000140 f820      	BLD  R2,0
                 ; 0000 00C9             target[11] = 1 ;
                +
000141 e8e4     +LDI R30 , LOW ( _target + ( 22 ) )
000142 e0f2     +LDI R31 , HIGH ( _target + ( 22 ) )
                 	__POINTW1MN _target,22
000143 d050      	RCALL SUBOPT_0x2
                 ; 0000 00CA         }
                 ; 0000 00CB         if(f112 == 0)
                 _0x38:
000144 999b      	SBIC 0x13,3
000145 c005      	RJMP _0x39
                 ; 0000 00CC         {
                 ; 0000 00CD             press = 1 ;
000146 9468      	SET
000147 f820      	BLD  R2,0
                 ; 0000 00CE             target[12] = 1 ;
                +
000148 e8e6     +LDI R30 , LOW ( _target + ( 24 ) )
000149 e0f2     +LDI R31 , HIGH ( _target + ( 24 ) )
                 	__POINTW1MN _target,24
00014a d049      	RCALL SUBOPT_0x2
                 ; 0000 00CF         }
                 ; 0000 00D0         if(f113 == 0)
                 _0x39:
00014b 999c      	SBIC 0x13,4
00014c c005      	RJMP _0x3A
                 ; 0000 00D1         {
                 ; 0000 00D2             press = 1 ;
00014d 9468      	SET
00014e f820      	BLD  R2,0
                 ; 0000 00D3             target[13] = 1 ;
                +
00014f e8e8     +LDI R30 , LOW ( _target + ( 26 ) )
000150 e0f2     +LDI R31 , HIGH ( _target + ( 26 ) )
                 	__POINTW1MN _target,26
000151 d042      	RCALL SUBOPT_0x2
                 ; 0000 00D4         }
                 ; 0000 00D5         if(f114 == 0)
                 _0x3A:
000152 999d      	SBIC 0x13,5
000153 c005      	RJMP _0x3B
                 ; 0000 00D6         {
                 ; 0000 00D7             press = 1 ;
000154 9468      	SET
000155 f820      	BLD  R2,0
                 ; 0000 00D8             target[14] = 1 ;
                +
000156 e8ea     +LDI R30 , LOW ( _target + ( 28 ) )
000157 e0f2     +LDI R31 , HIGH ( _target + ( 28 ) )
                 	__POINTW1MN _target,28
000158 d03b      	RCALL SUBOPT_0x2
                 ; 0000 00D9         }
                 ; 0000 00DA         if(f115 == 0)
                 _0x3B:
000159 999e      	SBIC 0x13,6
00015a c005      	RJMP _0x3C
                 ; 0000 00DB         {
                 ; 0000 00DC             press = 1 ;
00015b 9468      	SET
00015c f820      	BLD  R2,0
                 ; 0000 00DD             target[15] = 1 ;
                +
00015d e8ec     +LDI R30 , LOW ( _target + ( 30 ) )
00015e e0f2     +LDI R31 , HIGH ( _target + ( 30 ) )
                 	__POINTW1MN _target,30
00015f d034      	RCALL SUBOPT_0x2
                 ; 0000 00DE         }
                 ; 0000 00DF         if(f116 == 0)
                 _0x3C:
000160 999f      	SBIC 0x13,7
000161 c005      	RJMP _0x3D
                 ; 0000 00E0         {
                 ; 0000 00E1             press = 1 ;
000162 9468      	SET
000163 f820      	BLD  R2,0
                 ; 0000 00E2             target[16] = 1 ;
                +
000164 e8ee     +LDI R30 , LOW ( _target + ( 32 ) )
000165 e0f2     +LDI R31 , HIGH ( _target + ( 32 ) )
                 	__POINTW1MN _target,32
000166 d02d      	RCALL SUBOPT_0x2
                 ; 0000 00E3         }
                 ; 0000 00E4         if(f117 == 0)
                 _0x3D:
000167 9980      	SBIC 0x10,0
000168 c005      	RJMP _0x3E
                 ; 0000 00E5         {
                 ; 0000 00E6             press = 1 ;
000169 9468      	SET
00016a f820      	BLD  R2,0
                 ; 0000 00E7             target[17] = 1 ;
                +
00016b e9e0     +LDI R30 , LOW ( _target + ( 34 ) )
00016c e0f2     +LDI R31 , HIGH ( _target + ( 34 ) )
                 	__POINTW1MN _target,34
00016d d026      	RCALL SUBOPT_0x2
                 ; 0000 00E8         }
                 ; 0000 00E9         if(f118 == 0)
                 _0x3E:
00016e 9981      	SBIC 0x10,1
00016f c005      	RJMP _0x3F
                 ; 0000 00EA         {
                 ; 0000 00EB             press = 1 ;
000170 9468      	SET
000171 f820      	BLD  R2,0
                 ; 0000 00EC             target[18] = 1 ;
                +
000172 e9e2     +LDI R30 , LOW ( _target + ( 36 ) )
000173 e0f2     +LDI R31 , HIGH ( _target + ( 36 ) )
                 	__POINTW1MN _target,36
000174 d01f      	RCALL SUBOPT_0x2
                 ; 0000 00ED         }
                 ; 0000 00EE 
                 ; 0000 00EF         if(f119 == 0)
                 _0x3F:
000175 9982      	SBIC 0x10,2
000176 c005      	RJMP _0x40
                 ; 0000 00F0         {
                 ; 0000 00F1             press = 1 ;
000177 9468      	SET
000178 f820      	BLD  R2,0
                 ; 0000 00F2             target[19] = 1 ;
                +
000179 e9e4     +LDI R30 , LOW ( _target + ( 38 ) )
00017a e0f2     +LDI R31 , HIGH ( _target + ( 38 ) )
                 	__POINTW1MN _target,38
00017b d018      	RCALL SUBOPT_0x2
                 ; 0000 00F3         }
                 ; 0000 00F4         if(f120 == 0)
                 _0x40:
00017c 9983      	SBIC 0x10,3
00017d c005      	RJMP _0x41
                 ; 0000 00F5         {
                 ; 0000 00F6             press = 1 ;
00017e 9468      	SET
00017f f820      	BLD  R2,0
                 ; 0000 00F7             target[20] = 1 ;
                +
000180 e9e6     +LDI R30 , LOW ( _target + ( 40 ) )
000181 e0f2     +LDI R31 , HIGH ( _target + ( 40 ) )
                 	__POINTW1MN _target,40
000182 d011      	RCALL SUBOPT_0x2
                 ; 0000 00F8         }
                 ; 0000 00F9       }
                 _0x41:
000183 cf76      	RJMP _0x2B
                 ; 0000 00FA }
                 _0x42:
000184 cfff      	RJMP _0x42
                 ; .FEND
                 
                 	.DSEG
                 _number:
000260           	.BYTE 0xA
                 _z:
00026a           	.BYTE 0x2
                 _tabaga:
00026c           	.BYTE 0x2
                 _target:
00026e           	.BYTE 0x2A
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x0:
000185 01f6      	MOVW R30,R12
000186 e6ae      	LDI  R26,LOW(_target)
000187 e0b2      	LDI  R27,HIGH(_target)
000188 0fee      	LSL  R30
000189 1fff      	ROL  R31
00018a 0fae      	ADD  R26,R30
00018b 1fbf      	ADC  R27,R31
00018c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x1:
00018d e0a1      	LDI  R26,LOW(1)
00018e e0b0      	LDI  R27,HIGH(1)
00018f 83a0      	STD  Z+0,R26
000190 83b1      	STD  Z+1,R27
000191 9468      	SET
000192 f820      	BLD  R2,0
000193 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 17 TIMES, CODE SIZE REDUCTION:29 WORDS
                 SUBOPT_0x2:
000194 e0a1      	LDI  R26,LOW(1)
000195 e0b0      	LDI  R27,HIGH(1)
000196 83a0      	STD  Z+0,R26
000197 83b1      	STD  Z+1,R27
000198 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000199 9610      	adiw r26,0
00019a f039      	breq __delay_ms1
                 __delay_ms0:
                +
00019b ed80     +LDI R24 , LOW ( 0x7D0 )
00019c e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
00019d 9701     +SBIW R24 , 1
00019e f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
00019f 95a8      	wdr
0001a0 9711      	sbiw r26,1
0001a1 f7c9      	brne __delay_ms0
                 __delay_ms1:
0001a2 9508      	ret
                 
                 __ANEGW1:
0001a3 95f1      	NEG  R31
0001a4 95e1      	NEG  R30
0001a5 40f0      	SBCI R31,0
0001a6 9508      	RET
                 
                 __DIVW21U:
0001a7 2400      	CLR  R0
0001a8 2411      	CLR  R1
0001a9 e190      	LDI  R25,16
                 __DIVW21U1:
0001aa 0faa      	LSL  R26
0001ab 1fbb      	ROL  R27
0001ac 1c00      	ROL  R0
0001ad 1c11      	ROL  R1
0001ae 1a0e      	SUB  R0,R30
0001af 0a1f      	SBC  R1,R31
0001b0 f418      	BRCC __DIVW21U2
0001b1 0e0e      	ADD  R0,R30
0001b2 1e1f      	ADC  R1,R31
0001b3 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
0001b4 60a1      	SBR  R26,1
                 __DIVW21U3:
0001b5 959a      	DEC  R25
0001b6 f799      	BRNE __DIVW21U1
0001b7 01fd      	MOVW R30,R26
0001b8 01d0      	MOVW R26,R0
0001b9 9508      	RET
                 
                 __DIVW21:
0001ba d012      	RCALL __CHKSIGNW
0001bb dfeb      	RCALL __DIVW21U
0001bc f40e      	BRTC __DIVW211
0001bd dfe5      	RCALL __ANEGW1
                 __DIVW211:
0001be 9508      	RET
                 
                 __MODW21:
0001bf 94e8      	CLT
0001c0 ffb7      	SBRS R27,7
0001c1 c004      	RJMP __MODW211
0001c2 95a0      	COM  R26
0001c3 95b0      	COM  R27
0001c4 9611      	ADIW R26,1
0001c5 9468      	SET
                 __MODW211:
0001c6 fdf7      	SBRC R31,7
0001c7 dfdb      	RCALL __ANEGW1
0001c8 dfde      	RCALL __DIVW21U
0001c9 01fd      	MOVW R30,R26
0001ca f40e      	BRTC __MODW212
0001cb dfd7      	RCALL __ANEGW1
                 __MODW212:
0001cc 9508      	RET
                 
                 __CHKSIGNW:
0001cd 94e8      	CLT
0001ce fff7      	SBRS R31,7
0001cf c002      	RJMP __CHKSW1
0001d0 dfd2      	RCALL __ANEGW1
0001d1 9468      	SET
                 __CHKSW1:
0001d2 ffb7      	SBRS R27,7
0001d3 c006      	RJMP __CHKSW2
0001d4 95a0      	COM  R26
0001d5 95b0      	COM  R27
0001d6 9611      	ADIW R26,1
0001d7 f800      	BLD  R0,0
0001d8 9403      	INC  R0
0001d9 fa00      	BST  R0,0
                 __CHKSW2:
0001da 9508      	RET
                 
                 __GETW1P:
0001db 91ed      	LD   R30,X+
0001dc 91fc      	LD   R31,X
0001dd 9711      	SBIW R26,1
0001de 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  12 r1 :   5 r2 :  20 r3 :   0 r4 :   2 r5 :   1 r6 :   2 r7 :   1 
r8 :   9 r9 :   3 r10:   4 r11:   3 r12:   6 r13:   1 r14:   0 r15:   0 
r16:   0 r17:   0 r18:   0 r19:   0 r20:   0 r21:   0 r22:   2 r23:   0 
r24:   9 r25:   5 r26:  42 r27:  30 r28:   2 r29:   1 r30:  79 r31:  46 
x  :  13 y  :  12 z  :  11 
Registers used: 25 out of 35 (71.4%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   4 add   :   4 
adiw  :   7 and   :   0 andi  :   0 asr   :   0 bclr  :   0 bld   :  20 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   2 
brge  :   3 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   1 brmi  :   0 brne  :   8 brpl  :   0 brsh  :   0 brtc  :   2 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  :   5 
cbi   :   5 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   4 cls   :   0 clt   :   3 clv   :   0 clz   :   0 com   :   4 
cp    :   5 cpc   :   6 cpi   :   1 cpse  :   0 dec   :   2 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   0 inc   :   1 jmp   :  22 ld    :  10 ldd   :   4 ldi   :  92 
lds   :   2 lpm   :   7 lsl   :   2 lsr   :   0 mov   :   0 movw  :  19 
mul   :   0 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   0 
ori   :   0 out   :   9 pop   :   0 push  :   0 rcall :  37 ret   :  13 
reti  :   0 rjmp  :  31 rol   :   4 ror   :   0 sbc   :   1 sbci  :   1 
sbi   :   9 sbic  :  20 sbis  :   0 sbiw  :   7 sbr   :   1 sbrc  :   1 
sbrs  :   4 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :  20 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  11 std   :   4 sts   :   4 sub   :   1 subi  :   0 swap  :   0 
tst   :   0 wdr   :   1 
Instructions used: 50 out of 116 (43.1%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0003be    924     34    958   32768   2.9%
[.dseg] 0x000060 0x000298      0     56     56    2048   2.7%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 10 warnings
